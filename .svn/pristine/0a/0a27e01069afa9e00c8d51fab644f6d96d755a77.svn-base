package com.jk.api.controller;

import com.jk.api.enums.TypeEnums;
import com.jk.api.service.ApiService;
import com.jk.api.service.impl.OvertimeRecordApiServiceImpl;
import com.jk.common.annotation.KrtIgnoreAuth;
import com.jk.common.base.BaseController;
import com.jk.common.bean.ReturnBean;
import com.jk.common.bean.ReturnCode;
import com.jk.common.util.DateUtils;
import com.jk.kq.config.WorkTypeConfig;
import com.jk.kq.constant.CommonConst;
import com.jk.kq.entity.Holiday;
import com.jk.kq.entity.OvertimeRecord;
import com.jk.kq.entity.WorkType;
import com.jk.kq.entity.dto.OverTimeRecordDTO;
import com.jk.kq.entity.vo.OvertimeRecordListVO;
import com.jk.kq.mapper.HolidayMapper;
import com.jk.kq.service.IOvertimeRecordService;
import com.jk.kq.service.IWorkTypeService;
import com.jk.kq.utils.DateUtil;
import com.jk.kq.utils.TaskUtilService;
import com.jk.sys.entity.User;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

/**
 * 加班记录微信小程序API接口
 *
 * @author 何任鹏
 * @version 1.0
 * @date 2020年06月01日
 */
@Slf4j
@Controller
@RestController
@RequestMapping("api/overtime")
public class OvertimeController extends BaseController {

    @Autowired
    private IOvertimeRecordService overtimeRecordService;

    @Autowired
    private ApiService apiService;

    @Autowired
    private IWorkTypeService workTypeService;


    @Autowired
    private OvertimeRecordApiServiceImpl overtimeRecordApiService;

    @Autowired
    private HolidayMapper holidayMapper;

    @Autowired
    TaskUtilService taskUtilService;




    /**
     * 查找所有的加班记录，可以通过月份查找
     * @param request
     * @param dto dto
     * @return
     */
    @KrtIgnoreAuth
    @GetMapping("list")
    public ReturnBean list(HttpServletRequest request, OverTimeRecordDTO dto)   {
        User user = apiService.getUser(request);

//        if (ObjectUtils.isEmpty(dto.getStartDate()) || ObjectUtils.isEmpty(dto.getEndDate())){
//            log.error("日期范围不合理");
//            return ReturnBean.error(ReturnCode.INVALID_REQUEST);
//        }

        if (ObjectUtils.isEmpty(dto.getDate())){
             log.error("日期为空");
            return ReturnBean.error(ReturnCode.INVALID_REQUEST);
        }
        LocalDateTime firstday = DateUtil.firstday(dto.getDate());
        LocalDate lastDay = DateUtil.lastDay(dto.getDate());
        Map<String,Object> para = new HashMap<String,Object>();
        para.put("startDate",firstday);
        para.put("endDate",lastDay);
        para.put("userId",user.getId());

        List<Map> overtimeRecords = overtimeRecordService.selectByUserIdAndDate(user.getId(),
                dto.getStartDate(),dto.getEndDate());

        for (Map overtimeRecord : overtimeRecords) {
            String instanceId = (String)overtimeRecord.get("instanceId");
            Map<String, Integer> end = taskUtilService.isEnd(instanceId);
            Integer isEnd = end.get("isEnd");
            if (isEnd.equals(2)){
                overtimeRecord.put("statusName","审批中");
            }else {
                overtimeRecord.put("statusName","审批结束");
            }
            overtimeRecord.remove("instanceId");
        }


        return ReturnBean.ok(overtimeRecords);
    }

    /**
     * 查找所有的加班记录类型
     *
     * @return
     */
    @KrtIgnoreAuth
    @GetMapping("type")
    @ResponseBody
    public ReturnBean types() {
        List<WorkType> overtimeTypes = workTypeService.selectByPid(WorkTypeConfig.OVERTIME);
        return ReturnBean.ok(overtimeTypes);
    }

    /**
     * 新增用户加班申请
     * 当用户新增加班申请的时候，应该推送模板消息给领导
     *
     * @return
     */
    @KrtIgnoreAuth
    @PostMapping("insert")
    public ReturnBean insert(@RequestBody OverTimeRecordDTO dto)   {
        User openUser = apiService.getUser(request);
        if (ObjectUtils.isEmpty(dto.getDate())){
            log.error("加班天数为空");
            return ReturnBean.error(ReturnCode.INVALID_REQUEST);
        }
        if (ObjectUtils.isEmpty(dto.getReason())){
            log.error("加班理由为空");
            return ReturnBean.error(ReturnCode.INVALID_REQUEST);
        }
//        boolean checkDay = checkDay(dto.getDay());
//        if (!checkDay){
//            log.error("加班天数不合法");
//            return ReturnBean.error(ReturnCode.INVALID_REQUEST);
//        }
        int holiday = isHoliday();
        if (CommonConst.HOLIDAY_TYPE_WORK.equals(holiday)){
            dto.setTypeId(TypeEnums.OVERTIME_WORK.getStatus());
        }else if (CommonConst.WEEK.equals(holiday)){
            dto.setTypeId(TypeEnums.OVERTIME_WEEK.getStatus());
        }else {
            dto.setTypeId(TypeEnums.OVERTIME_HOLI.getStatus());
        }


        Integer  overtimeRecordId=  overtimeRecordApiService.addOvertime(openUser,dto);
        OvertimeRecord overtimeRecord = overtimeRecordService.selectById(overtimeRecordId);
        List<User> ids = apiService.nextHandel(overtimeRecord.getInstanceId());
        for (User id : ids) {
//            GzhOpenUser gzhOpenUser = gzhMapper.selectByOpenId(id.getUnionId());
//            if (!ObjectUtils.isEmpty(gzhOpenUser)){
//                sendWeChatUtil.sendMessage(gzhOpenUser.getOpenid(),"您好，您有一个员工申请待审批!",
//                        "加班申请", "待审批", dto.getReason(),
//                        "点击查看详情", "页面跳转路径（项目上线后填入路径）");
//            }
        }


        return ReturnBean.ok();
    }

    /**
     * 判断当日是不是假期
     * @return
     */
    public int isHoliday() {
        Date today = new Date();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(today);
        Holiday holiday = holidayMapper.isHoliday(DateUtils.dateToString("yyyy-MM-dd", today));
        if( holiday != null ){
            if (CommonConst.HOLIDAY_TYPE_HOLIDAY.equals(holiday.getType())){
                return CommonConst.HOLIDAY_TYPE_HOLIDAY;
            }
        }
        if ( calendar.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY
        || calendar.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY){
            return CommonConst.WEEK;
        }
        return CommonConst.HOLIDAY_TYPE_WORK;
    }

    private boolean checkDay(BigDecimal input){
        if (input.compareTo(BigDecimal.ONE) == 0){ return true;}
        if (input.compareTo(BigDecimal.valueOf(1.5)) == 0){ return true;}
        return input.compareTo(BigDecimal.valueOf(0.5)) == 0;
    }

}
