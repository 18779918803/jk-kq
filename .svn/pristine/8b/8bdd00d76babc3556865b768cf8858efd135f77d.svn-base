package com.jk.api.controller;


import com.jk.api.dto.FinishDTO;
import com.jk.api.enums.TypeEnums;
import com.jk.api.service.ApiService;
import com.jk.common.annotation.KrtIgnoreAuth;
import com.jk.common.bean.ReturnBean;
import com.jk.common.bean.ReturnCode;
import com.jk.kq.entity.vo.LeaveRecordVO;
import com.jk.kq.entity.vo.OvertimeRecordVo;
import com.jk.kq.entity.vo.WriteoffRecordVo;
import com.jk.kq.service.ILeaveRecordService;
import com.jk.kq.service.IOvertimeRecordService;
import com.jk.kq.service.IWorkTypeService;
import com.jk.kq.service.IWriteoffRecordService;
import com.jk.sys.entity.User;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("api/wechat/kq")
@Slf4j
public class FinishApiController {


    @Autowired
    private ILeaveRecordService leaveRecordService;

    @Autowired
    private IWorkTypeService workTypeService;

    @Autowired
    private IWriteoffRecordService writeoffRecordService;

    @Autowired
    private ApiService apiService;

    @Autowired
    private IOvertimeRecordService overtimeRecordService;

    @KrtIgnoreAuth
    @GetMapping("finish/list")
    public ReturnBean applicationList(HttpServletRequest request, FinishDTO dto)   {
        User openUser = apiService.getUser(request);
        List<Object> result = new ArrayList<>();
        Map<String,Object> map = new HashMap<>();
        if (ObjectUtils.isEmpty(dto.getTypeId())){
            return ReturnBean.error(
                    ReturnCode.INVALID_REQUEST.getCode(),"类型id为空"
            );
        }
        if (ObjectUtils.isEmpty(dto.getDate())){
            return ReturnBean.error(
                    ReturnCode.INVALID_REQUEST.getCode(),"日期为空"
            );
        }
        map.put("date",dto.getDate());
        //默认查请假
        Integer typeId = dto.getTypeId();
        if (TypeEnums.ALL.getStatus().equals(typeId)){
            map.put("type",TypeEnums.LEAVE.name().toLowerCase());
            List<LeaveRecordVO> doneTasks = leaveRecordService.findDoneTasks(map, openUser.getId().toString());
            for (LeaveRecordVO doneTask : doneTasks) {
                doneTask.setTypeName(workTypeService.selectById(TypeEnums.LEAVE.getStatus()).getName());
            }
            result.addAll(doneTasks);

            map.put("type",TypeEnums.WRITEOFF.name().toLowerCase());
            List<WriteoffRecordVo> writeoffRecordVos = writeoffRecordService.findDoneTasks(map, openUser.getId().toString());
            for (WriteoffRecordVo doneTask : writeoffRecordVos) {
                doneTask.setTypeName(workTypeService.selectById(TypeEnums.WRITEOFF.getStatus()).getName());
            }
            result.addAll(writeoffRecordVos);


            map.put("type",TypeEnums.OVERTIME.name().toLowerCase());
            List<OvertimeRecordVo> overtimeRecordVos = overtimeRecordService.findDoneTasks(map, openUser.getId().toString());
            for (OvertimeRecordVo doneTask : overtimeRecordVos) {
                doneTask.setTypeName(workTypeService.selectById(TypeEnums.OVERTIME.getStatus()).getName());
            }
            result.addAll(overtimeRecordVos);

            return ReturnBean.ok(result);

        }else if (TypeEnums.LEAVE.getStatus().equals(typeId)){
            map.put("type",TypeEnums.LEAVE.name().toLowerCase());
            List<LeaveRecordVO> doneTasks = leaveRecordService.findDoneTasks(map, openUser.getId().toString());
            for (LeaveRecordVO doneTask : doneTasks) {
                doneTask.setTypeName(workTypeService.selectById(TypeEnums.LEAVE.getStatus()).getName());
            }
            return ReturnBean.ok(doneTasks);
        }else if (TypeEnums.WRITEOFF.getStatus().equals(typeId)){
            map.put("type",TypeEnums.WRITEOFF.name().toLowerCase());
            List<WriteoffRecordVo> doneTasks = writeoffRecordService.findDoneTasks(map, openUser.getId().toString());
            for (WriteoffRecordVo doneTask : doneTasks) {
                doneTask.setTypeName(workTypeService.selectById(TypeEnums.WRITEOFF.getStatus()).getName());
            }
            return ReturnBean.ok(doneTasks);
        }else if (TypeEnums.OVERTIME.getStatus().equals(typeId)){
            map.put("type",TypeEnums.OVERTIME.name().toLowerCase());
            List<OvertimeRecordVo> doneTasks = overtimeRecordService.findDoneTasks(map, openUser.getId().toString());
            for (OvertimeRecordVo doneTask : doneTasks) {
                doneTask.setTypeName(workTypeService.selectById(TypeEnums.OVERTIME.getStatus()).getName());
            }
            return ReturnBean.ok(doneTasks);
        }

      return ReturnBean.ok();
    }

}
