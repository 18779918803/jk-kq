package com.jk.kq.service.impl;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.github.pagehelper.Page;
import com.jk.activiti.domain.BizLeaveVo;
import com.jk.activiti.domain.Leave;
import com.jk.activiti.mapper.LeaveMapper;
import com.jk.activiti.page.PageDomain;
import com.jk.activiti.page.TableSupport;
import com.jk.activiti.service.IProcessService;
import com.jk.activiti.utils.DateUtils;
import com.jk.activiti.utils.StringUtils;
import com.jk.common.bean.PageHelper;
import com.jk.common.bean.Query;
import com.jk.kq.entity.OpenUser;
import com.jk.kq.entity.OvertimeRecord;
import com.jk.kq.entity.Position;
import com.jk.kq.mapper.OpenUserMapper;
import com.jk.kq.service.IOpenUserService;
import com.jk.kq.service.IPositionService;
import com.jk.sys.entity.User;
import com.jk.sys.service.IUserService;
import org.activiti.engine.HistoryService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.history.HistoricProcessInstance;
import org.activiti.engine.history.HistoricTaskInstance;
import org.activiti.engine.impl.persistence.entity.TaskEntityImpl;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.jk.kq.entity.LeaveRecord;
import com.jk.kq.mapper.LeaveRecordMapper;
import com.jk.kq.service.ILeaveRecordService;
import com.jk.common.base.BaseServiceImpl;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;


/**
 * 请假申请服务接口实现层
 *
 * @author 何任鹏
 * @version 1.0
 * @date 2020年06月01日
 */
@Service
public class LeaveRecordServiceImpl extends BaseServiceImpl<LeaveRecordMapper, LeaveRecord> implements ILeaveRecordService {

    @Autowired
    private LeaveRecordMapper leaveRecordMapper;

    @Autowired
    private IPositionService positionService;

    @Autowired
    private OpenUserMapper openUserMapper;


    @Autowired
    private RuntimeService runtimeService;

    @Autowired
    private TaskService taskService;

    @Autowired
    private HistoryService historyService;

    @Autowired
    private IProcessService processService;


    @Autowired
    private IUserService userService;

    /**
     * 通过openUserId查找所有的请假记录
     *
     * @param openUserId
     * @param date
     * @return
     */
    @Override
    public List<LeaveRecord> selectByOpenUserIdAndDate(Integer openUserId, LocalDate date) {
        return leaveRecordMapper.selectByOpenUserIdAndDate(openUserId, date);
    }

    /**
     * 新增用户请假申请
     *
     * @param openUser
     * @param leaveRecord
     * @return 返回该申请需要推送的用户的集合
     */
    @Override
    public List<OpenUser> insert(OpenUser openUser, LeaveRecord leaveRecord) {
        leaveRecord.setOpenUserId(openUser.getId());
        leaveRecord.setName(openUser.getName());
        leaveRecord.setOrganId(openUser.getOrganId());
        leaveRecord.setOrgan(openUser.getOrgan());
        //查找用户的职位信息
        //Position position = positionService.selectById(openUser.getPositionId());
        ////用户的申请初始状态等于用户的职位审批等级
        //leaveRecord.setState(position.getGrade());
        //List<OpenUser> checkList = null;
        ////一般员工
        //if (position.getGrade() == 0) {
        //    //请假1天～3天（含 3天），呈部门负责人和分管领导审批，
        //    if (leaveRecord.getDay() <= 3) {
        //        leaveRecord.setTopState(2);
        //    } else {
        //        //请假 3 天以上，呈部门负责人、分管领导和集团总经理审批；
        //        leaveRecord.setTopState(3);
        //    }
        //    //给同部门的上一级领导审批
        //    checkList = openUserMapper.selectOpenUser(openUser.getOrganId(), position.getGrade() + 1);
        //} else if (position.getGrade() > 0) {
        //    //部门正副职请假 1天～3天（含 3天），呈分管领导和集团总经理审批；
        //    if (leaveRecord.getDay() <= 3) {
        //        leaveRecord.setTopState(3);
        //    } else {
        //        //请假 3天以上，呈分管领导、集团总经理和董事长审批。
        //        leaveRecord.setTopState(4);
        //    }
        //    //如果是公司部门负责人，那么查找分管领导进行推送
        //    checkList = openUserMapper.selectLeaders(openUser.getOrganId(), position.getGrade() + 1);
        //}
        ////集团分管领导不走审批
        //leaveRecordMapper.insert(leaveRecord);
        return null;
    }

    /**
     * 查找用户可以审核的请假申请
     *
     * @param queryMap
     * @return
     */
    @Override
    public List selectToCheck(Map queryMap) {
        return leaveRecordMapper.selectToCheck(queryMap);
    }




    @Transactional
    @Override
    public ProcessInstance submitApply(LeaveRecord entity, String applyUserId, String key, Map<String, Object> variables) {
        entity.setApplyUser(applyUserId);
        entity.setApplyTime(DateUtils.getNowDate());
        String businessKey = entity.getId().toString(); // 实体类 ID，作为流程的业务 key
        ProcessInstance processInstance = processService.submitApply(applyUserId, businessKey, entity.getTitle(), entity.getReason(), key, variables);
        String processInstanceId = processInstance.getId();
        entity.setInstanceId(processInstanceId); // 建立双向关系
        leaveRecordMapper.updateById(entity);
        return processInstance;
    }

    @Override
    public List<LeaveRecord> findTodoTasks( String username,Map param) {

        List<LeaveRecord> results = new ArrayList<>();
        //Query query = new Query(param);
        //com.baomidou.mybatisplus.extension.plugins.pagination.Page page = query.getPage();
        //PageHelper.startPage(page);
        List<Task> tasks = processService.findTodoTasks(username, (String)param.get("type"));
        // 根据流程的业务ID查询实体并关联
        for (Task task : tasks) {
            TaskEntityImpl taskImpl = (TaskEntityImpl) task;
            String processInstanceId = taskImpl.getProcessInstanceId();
            // 条件过滤 1
            if (param.get("instanceId") != null && StringUtils.isNotBlank((CharSequence) param.get("instanceId")) && !param.get("instanceId").equals(processInstanceId)) {
                continue;
            }
            ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().processInstanceId(processInstanceId).singleResult();
            String businessKey = processInstance.getBusinessKey();
            LeaveRecord leave2 = leaveRecordMapper.selectById(Integer.parseInt(businessKey));
            // 条件过滤 2
            //if (StringUtils.isNotBlank((String) param.get("type")) && !param.get("type").equals(leave2.getType())) {
            //    continue;
            //}
            leave2.setTaskId(taskImpl.getId());
            if (taskImpl.getSuspensionState() == 2) {
                leave2.setTaskName("已挂起");
            } else {
                leave2.setTaskName(taskImpl.getName());
            }
            Integer userId = userService.getUserId(leave2.getApplyUser());
            User user = userService.selectById(userId);
            leave2.setApplyUserName(user.getName());
            results.add(leave2);
        }

        //page.setRecords(results);

        return results;
    }

    @Override
    public IPage findDoneTasks(Map para, String username) {
        // 手动分页
        PageDomain pageDomain = TableSupport.buildPageRequest();
        Integer pageNum = pageDomain.getPageNum();
        Integer pageSize = pageDomain.getPageSize();
        Page<BizLeaveVo> list = new Page<>();

        List<LeaveRecord> results = new ArrayList<>();
        List<HistoricTaskInstance> hisList = processService.findDoneTasks(username, (String) para.get("type"));
        // 根据流程的业务ID查询实体并关联
        for (HistoricTaskInstance instance : hisList) {
            String processInstanceId = instance.getProcessInstanceId();
            // 条件过滤 1
            if (para.get("instanceId") != null && StringUtils.isNotBlank((CharSequence) para.get("instanceId")) && !para.get("instanceId").equals(processInstanceId)) {
                continue;
            }
            HistoricProcessInstance processInstance = historyService.createHistoricProcessInstanceQuery().processInstanceId(processInstanceId).singleResult();
            String businessKey = processInstance.getBusinessKey();
            LeaveRecord leave2 = leaveRecordMapper.selectById(Integer.parseInt(businessKey));
            LeaveRecord newLeave = new LeaveRecord();
            BeanUtils.copyProperties(leave2, newLeave);
            // 条件过滤 2
            //if (StringUtils.isNotBlank((String) para.get("type")) && !para.get("type").equals(leave2.getType())) {
            //    continue;
            //}
            newLeave.setTaskId(instance.getId());
            newLeave.setTaskName(instance.getName());
            newLeave.setDoneTime(instance.getEndTime());
            Integer userId = userService.getUserId(leave2.getApplyUser());
            User user = userService.selectById(userId);
            newLeave.setApplyUserName(user.getName());
            results.add(newLeave);
        }

        Query query = new Query(para);
        com.baomidou.mybatisplus.extension.plugins.pagination.Page page = query.getPage();
        PageHelper.startPage(page);
        page.setRecords(results);
        return page;
    }
}
